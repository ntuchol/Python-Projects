{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5f9cf9fc-14d9-4012-bf58-162baace411a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "time.sleep(270)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "62a681ff-4ec0-43b5-8706-7ffbf3514cdb",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nearly cooked, get your spoon read\n"
     ]
    }
   ],
   "source": [
    "print(\"Nearly cooked, get your spoon read\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a82a4227-b328-4647-84e1-253e7a3d65b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The egg is done boiling\n"
     ]
    }
   ],
   "source": [
    "time.sleep(30)\n",
    "print(\"The egg is done boiling\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "79297eca-224f-45be-a962-251dedb3c501",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Nerves of Steel!\n",
      "Try to guess when the timer will expire.\n",
      "The timer will expire at a random time between 1 and 10 seconds.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your guess (in seconds):  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You lose! The timer expired after 4.0 seconds.\n",
      "You guessed 3 seconds.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Play again? (y/n):  n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Goodbye!\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import random\n",
    "\n",
    "def nerves_of_steel():\n",
    "    \"\"\"Plays the Nerves of Steel party game.\"\"\"\n",
    "\n",
    "    print(\"Welcome to Nerves of Steel!\")\n",
    "    print(\"Try to guess when the timer will expire.\")\n",
    "\n",
    "    # Generate a random time (between 1 and 10 seconds)\n",
    "    target_time = random.randint(1, 10)\n",
    "    print(f\"The timer will expire at a random time between 1 and 10 seconds.\")\n",
    "\n",
    "    # Start the timer\n",
    "    start_time = time.time()\n",
    "\n",
    "    # Get the player's guess\n",
    "    while True:\n",
    "        try:\n",
    "            guess = int(input(\"Enter your guess (in seconds): \"))\n",
    "            if 1 <= guess <= 10:\n",
    "                break\n",
    "            else:\n",
    "                print(\"Please enter a number between 1 and 10.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "    # Wait for the timer to expire\n",
    "    time.sleep(target_time)\n",
    "\n",
    "    # Calculate the actual time elapsed\n",
    "    actual_time = time.time() - start_time\n",
    "\n",
    "    # Determine the winner\n",
    "    if abs(guess - target_time) <= 0.1:\n",
    "        print(\"You guessed it exactly! You win!\")\n",
    "    elif abs(guess - target_time) <= 0.5:\n",
    "        print(f\"You are very close! You lose by {abs(guess - target_time):.1f} seconds.\")\n",
    "    else:\n",
    "        print(f\"You lose! The timer expired after {target_time:.1f} seconds.\")\n",
    "        print(f\"You guessed {guess} seconds.\")\n",
    "\n",
    "    # Play again?\n",
    "    play_again = input(\"Play again? (y/n): \")\n",
    "    if play_again.lower() == \"y\":\n",
    "        nerves_of_steel()\n",
    "    else:\n",
    "        print(\"Goodbye!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    nerves_of_steel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ba9535fb-d31d-4af2-bbae-11c163d2109a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter an item to add to the list (or type 'save' to save and exit):  apple\n",
      "Enter an item to add to the list (or type 'save' to save and exit):  pear\n",
      "Enter an item to add to the list (or type 'save' to save and exit):  none\n",
      "Enter an item to add to the list (or type 'save' to save and exit):  none\n",
      "Enter an item to add to the list (or type 'save' to save and exit):  save\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List saved to my_list.txt\n"
     ]
    }
   ],
   "source": [
    "def record_list(filename=\"my_list.txt\"):\n",
    "    \"\"\"Records user input into a list and saves it to a file.\"\"\"\n",
    "    my_list = []\n",
    "    while True:\n",
    "        item = input(\"Enter an item to add to the list (or type 'save' to save and exit): \")\n",
    "        if item.lower() == 'save':\n",
    "            break\n",
    "        my_list.append(item)\n",
    "    \n",
    "    with open(filename, 'w') as file:\n",
    "        for item in my_list:\n",
    "            file.write(item + '\\n')\n",
    "    print(f\"List saved to {filename}\")\n",
    "\n",
    "# Example usage\n",
    "record_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6cb946d3-700c-4803-b8e0-4d8e8c4bf5fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number of guests attending the party:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of guests attending the party is: 3\n"
     ]
    }
   ],
   "source": [
    "def get_guest_count():\n",
    "    while True:\n",
    "        try:\n",
    "            num_guests = int(input(\"Enter the number of guests attending the party: \"))\n",
    "            if num_guests >= 0:\n",
    "                return num_guests\n",
    "            else:\n",
    "                print(\"Please enter a non-negative number of guests.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "num_guests = get_guest_count()\n",
    "print(f\"The number of guests attending the party is: {num_guests}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fd304dd2-0cfe-4690-a772-25c3b085c614",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: John Doe\n",
      "Updated age: 31\n",
      "Keys remaining: ['name']\n",
      "\"Key 'age' not found.\"\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "\n",
    "class DataStorage:\n",
    "    def __init__(self, filename=\"data.json\"):\n",
    "        self.filename = filename\n",
    "        self.data = self._load_data()\n",
    "\n",
    "    def _load_data(self):\n",
    "         try:\n",
    "            with open(self.filename, 'r') as file:\n",
    "                return json.load(file)\n",
    "         except FileNotFoundError:\n",
    "            return {}\n",
    "         except json.JSONDecodeError:\n",
    "            return {}\n",
    "\n",
    "    def _save_data(self):\n",
    "        with open(self.filename, 'w') as file:\n",
    "            json.dump(self.data, file, indent=4)\n",
    "\n",
    "    def create(self, key, value):\n",
    "        if key in self.data:\n",
    "            raise ValueError(f\"Key '{key}' already exists.\")\n",
    "        self.data[key] = value\n",
    "        self._save_data()\n",
    "\n",
    "    def read(self, key):\n",
    "        if key not in self.data:\n",
    "            raise KeyError(f\"Key '{key}' not found.\")\n",
    "        return self.data[key]\n",
    "\n",
    "    def update(self, key, value):\n",
    "         if key not in self.data:\n",
    "            raise KeyError(f\"Key '{key}' not found.\")\n",
    "         self.data[key] = value\n",
    "         self._save_data()\n",
    "\n",
    "    def delete(self, key):\n",
    "        if key not in self.data:\n",
    "             raise KeyError(f\"Key '{key}' not found.\")\n",
    "        del self.data[key]\n",
    "        self._save_data()\n",
    "\n",
    "    def get_all_keys(self):\n",
    "        return list(self.data.keys())\n",
    "\n",
    "# Example usage:\n",
    "if __name__ == \"__main__\":\n",
    "    storage = DataStorage()\n",
    "\n",
    "    storage.create(\"name\", \"John Doe\")\n",
    "    storage.create(\"age\", 30)\n",
    "    print(f\"Name: {storage.read('name')}\")  # Output: John Doe\n",
    "    storage.update(\"age\", 31)\n",
    "    print(f\"Updated age: {storage.read('age')}\") # Output: 31\n",
    "    storage.delete(\"age\")\n",
    "    print(f\"Keys remaining: {storage.get_all_keys()}\") # Output: ['name']\n",
    "\n",
    "    try:\n",
    "        print(storage.read(\"age\"))\n",
    "    except KeyError as e:\n",
    "        print(e) # Output: Key 'age' not found."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "74f7af7b-a93c-4bae-b2de-520759526625",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "time_limit_seconds = 60  # Example: 60 seconds\n",
    "start_time = time.time()\n",
    "while True:\n",
    "    # Get the current time\n",
    "    elapsed_time = time.time() - start_time\n",
    "\n",
    "    # Check if the time limit has been reached\n",
    "    if elapsed_time >= time_limit_seconds:\n",
    "        print(\"Time's up!\")\n",
    "        break  # Exit the loop\n",
    "\n",
    "    # Add your game logic here\n",
    "    # ... (e.g., prompt players, check for answers, etc.)\n",
    "\n",
    "    # Delay to avoid overwhelming the system (optional)\n",
    "    time.sleep(0.1)  # Pause for 0.1 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "540ee582-140a-48b2-a3be-448bb9a84d42",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'dotenv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[11], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mjson\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mos\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdotenv\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m load_dotenv\n\u001b[1;32m      6\u001b[0m load_dotenv()\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_weather\u001b[39m(city):\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'dotenv'"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af73e3a5-d733-44ed-bf4e-1e4cf05062bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import datetime\n",
    "import threading\n",
    "import os\n",
    "import platform\n",
    "import json\n",
    "\n",
    "class Alarm:\n",
    "    def __init__(self, hour, minute, label=\"Alarm\", sound_file=None, enabled=True):\n",
    "        self.hour = hour\n",
    "        self.minute = minute\n",
    "        self.label = label\n",
    "        self.sound_file = sound_file\n",
    "        self.enabled = enabled\n",
    "        self.thread = None\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.label}: {self.hour:02}:{self.minute:02} ({'Enabled' if self.enabled else 'Disabled'})\"\n",
    "\n",
    "    def check_time(self):\n",
    "         while self.enabled:\n",
    "            now = datetime.datetime.now()\n",
    "            if now.hour == self.hour and now.minute == self.minute and now.second == 0:\n",
    "                print(f\"\\n{self.label} triggered!\")\n",
    "                self.play_sound()\n",
    "                time.sleep(60)  # Avoid retriggering for a minute\n",
    "            time.sleep(1)\n",
    "\n",
    "    def play_sound(self):\n",
    "        if self.sound_file:\n",
    "            try:\n",
    "                if platform.system() == \"Windows\":\n",
    "                    import winsound\n",
    "                    winsound.PlaySound(self.sound_file, winsound.SND_ASYNC)\n",
    "                elif platform.system() == \"Linux\" or platform.system() == \"Darwin\":\n",
    "                    os.system(f\"aplay {self.sound_file} &\")\n",
    "                else:\n",
    "                    print(\"Sound playback is not supported on this platform.\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error playing sound: {e}\")\n",
    "        else:\n",
    "            print(\"Default alarm sound\")\n",
    "\n",
    "    def start(self):\n",
    "        if self.enabled:\n",
    "            self.thread = threading.Thread(target=self.check_time)\n",
    "            self.thread.daemon = True\n",
    "            self.thread.start()\n",
    "\n",
    "    def stop(self):\n",
    "        self.enabled = False\n",
    "        if self.thread and self.thread.is_alive():\n",
    "            self.thread.join()\n",
    "\n",
    "class AlarmClock:\n",
    "    def __init__(self, data_file=\"alarms.json\"):\n",
    "         self.alarms = []\n",
    "         self.data_file = data_file\n",
    "         self.load_alarms()\n",
    "    \n",
    "    def add_alarm(self, hour, minute, label=\"Alarm\", sound_file=None):\n",
    "        alarm = Alarm(hour, minute, label, sound_file)\n",
    "        self.alarms.append(alarm)\n",
    "        self.save_alarms()\n",
    "        print(f\"Alarm '{label}' set for {hour:02}:{minute:02}\")\n",
    "        return alarm\n",
    "\n",
    "    def remove_alarm(self, label):\n",
    "        for alarm in self.alarms:\n",
    "            if alarm.label == label:\n",
    "                alarm.stop()\n",
    "                self.alarms.remove(alarm)\n",
    "                self.save_alarms()\n",
    "                print(f\"Alarm '{label}' removed.\")\n",
    "                return\n",
    "        print(f\"Alarm '{label}' not found.\")\n",
    "\n",
    "    def list_alarms(self):\n",
    "        if not self.alarms:\n",
    "            print(\"No alarms set.\")\n",
    "            return\n",
    "        print(\"Current Alarms:\")\n",
    "        for alarm in self.alaralarms:\n",
    "            print(alarm)\n",
    "\n",
    "    def start_alarms(self):\n",
    "        for alarm in self.alarms:\n",
    "            alarm.start()\n",
    "        print(\"Alarms started.\")\n",
    "\n",
    "    def stop_alarms(self):\n",
    "         for alarm in self.alarms:\n",
    "            alarm.stop()\n",
    "         print(\"Alarms stopped.\")\n",
    "\n",
    "    def save_alarms(self):\n",
    "        alarm_data = []\n",
    "        for alarm in self.alarms:\n",
    "            alarm_data.append({\n",
    "                \"hour\": alarm.hour,\n",
    "                \"minute\": alarm.minute,\n",
    "                \"label\": alarm.label,\n",
    "                \"sound_file\": alarm.sound_file,\n",
    "                \"enabled\": alarm.enabled\n",
    "            })\n",
    "        try:\n",
    "            with open(self.data_file, 'w') as f:\n",
    "                json.dump(alarm_data, f)\n",
    "        except Exception as e:\n",
    "            print(f\"Error saving alarms: {e}\")\n",
    "\n",
    "    def load_alarms(self):\n",
    "        try:\n",
    "            with open(self.data_file, 'r') as f:\n",
    "                alarm_data = json.load(f)\n",
    "                for data in alarm_data:\n",
    "                     alarm = Alarm(data[\"hour\"], data[\"minute\"], data[\"label\"], data[\"sound_file\"], data[\"enabled\"])\n",
    "                     self.alarms.append(alarm)\n",
    "        except FileNotFoundError:\n",
    "            print(\"No saved alarms found.\")\n",
    "        except json.JSONDecodeError:\n",
    "            print(\"Error decoding saved alarms.\")\n",
    "        except Exception as e:\n",
    "            print(f\"Error loading alarms: {e}\")\n",
    "\n",
    "def main():\n",
    "    alarm_clock = AlarmClock()\n",
    "    alarm_clock.start_alarms()\n",
    "\n",
    "    while True:\n",
    "        print(\"\\nOptions: add, remove, list, exit\")\n",
    "        command = input(\"> \").lower()\n",
    "\n",
    "        if command == \"add\":\n",
    "            try:\n",
    "                hour = int(input(\"Enter hour (0-23): \"))\n",
    "                minute = int(input(\"Enter minute (0-59): \"))\n",
    "                label = input(\"Enter label (optional): \") or \"Alarm\"\n",
    "                sound_file = input(\"Enter sound file path (optional): \")\n",
    "                alarm_clock.add_alarm(hour, minute, label, sound_file)\n",
    "            except ValueError:\n",
    "                print(\"Invalid input. Please enter numbers for hour and minute.\")\n",
    "        elif command == \"remove\":\n",
    "            label = input(\"Enter label to remove: \")\n",
    "            alarm_clock.remove_alarm(label)\n",
    "        elif command == \"list\":\n",
    "            alarm_clock.list_alarms()\n",
    "        elif command == \"exit\":\n",
    "             alarm_clock.stop_alarms()\n",
    "             break\n",
    "        else:\n",
    "            print(\"Invalid command.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30272dc3-af4e-4df6-b521-4d67241d309c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  exit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Invalid input. Please enter an integer.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the time in seconds:  0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time's up!\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "def countdown(t):\n",
    "    while t > 0:\n",
    "        mins, secs = divmod(t, 60)\n",
    "        timer = '{:02d}:{:02d}'.format(mins, secs)\n",
    "        print(timer, end=\"\\r\")\n",
    "        time.sleep(1)\n",
    "        t -= 1\n",
    "    print(\"Time's up!\")\n",
    "\n",
    "while True:\n",
    "    try:\n",
    "        t = int(input(\"Enter the time in seconds: \"))\n",
    "        countdown(t)\n",
    "    except ValueError:\n",
    "        print(\"Invalid input. Please enter an integer.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f647cc3-e88a-431c-91d2-1d5dddae96d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def multiplication_quiz(num_questions):\n",
    "    score = 0\n",
    "    for _ in range(num_questions):\n",
    "        num1 = random.randint(2, 12)\n",
    "        num2 = random.randint(2, 12)\n",
    "        correct_answer = num1 * num2\n",
    "\n",
    "        user_answer = input(f\"What is {num1} x {num2}? \")\n",
    "        try:\n",
    "             user_answer = int(user_answer)\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "            continue\n",
    "\n",
    "        if user_answer == correct_answer:\n",
    "            print(\"Correct!\")\n",
    "            score += 1\n",
    "        else:\n",
    "            print(f\"Incorrect. The correct answer was {correct_answer}.\")\n",
    "    print(f\"You got {score} out of {num_questions} questions correct.\")\n",
    "\n",
    "num_questions = input(\"How many questions do you want in the quiz? \")\n",
    "try:\n",
    "    num_questions = int(num_questions)\n",
    "    if num_questions <= 0:\n",
    "        print(\"Please enter a positive number of questions.\")\n",
    "    else:\n",
    "        multiplication_quiz(num_questions)\n",
    "except ValueError:\n",
    "    print(\"Invalid input. Please enter a number.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de5dce67-94da-44f6-afc7-aafc4ea0e6a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import random\n",
    "\n",
    "def nerves_of_steel():\n",
    "    \"\"\"Plays the Nerves of Steel party game.\"\"\"\n",
    "\n",
    "    print(\"Welcome to Nerves of Steel!\")\n",
    "    print(\"Try to guess when the timer will expire.\")\n",
    "\n",
    "    # Generate a random time (between 1 and 10 seconds)\n",
    "    target_time = random.randint(1, 10)\n",
    "    print(f\"The timer will expire at a random time between 1 and 10 seconds.\")\n",
    "\n",
    "    # Start the timer\n",
    "    start_time = time.time()\n",
    "\n",
    "    # Get the player's guess\n",
    "    while True:\n",
    "        try:\n",
    "            guess = int(input(\"Enter your guess (in seconds): \"))\n",
    "            if 1 <= guess <= 10:\n",
    "                break\n",
    "            else:\n",
    "                print(\"Please enter a number between 1 and 10.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "    # Wait for the timer to expire\n",
    "    time.sleep(target_time)\n",
    "\n",
    "    # Calculate the actual time elapsed\n",
    "    actual_time = time.time() - start_time\n",
    "\n",
    "    # Determine the winner\n",
    "    if abs(guess - target_time) <= 0.1:\n",
    "        print(\"You guessed it exactly! You win!\")\n",
    "    elif abs(guess - target_time) <= 0.5:\n",
    "        print(f\"You are very close! You lose by {abs(guess - target_time):.1f} seconds.\")\n",
    "    else:\n",
    "        print(f\"You lose! The timer expired after {target_time:.1f} seconds.\")\n",
    "        print(f\"You guessed {guess} seconds.\")\n",
    "\n",
    "    # Play again?\n",
    "    play_again = input(\"Play again? (y/n): \")\n",
    "    if play_again.lower() == \"y\":\n",
    "        nerves_of_steel()\n",
    "    else:\n",
    "        print(\"Goodbye!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    nerves_of_steel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "988d02c4-d5e1-45b5-9d14-0192dbe59ddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import os\n",
    "\n",
    "class DataStorage:\n",
    "    def __init__(self, filename=\"data.json\"):\n",
    "        self.filename = filename\n",
    "        self.data = self._load_data()\n",
    "\n",
    "    def _load_data(self):\n",
    "         try:\n",
    "            with open(self.filename, 'r') as file:\n",
    "                return json.load(file)\n",
    "         except FileNotFoundError:\n",
    "            return {}\n",
    "         except json.JSONDecodeError:\n",
    "            return {}\n",
    "\n",
    "    def _save_data(self):\n",
    "        with open(self.filename, 'w') as file:\n",
    "            json.dump(self.data, file, indent=4)\n",
    "\n",
    "    def create(self, key, value):\n",
    "        if key in self.data:\n",
    "            raise ValueError(f\"Key '{key}' already exists.\")\n",
    "        self.data[key] = value\n",
    "        self._save_data()\n",
    "\n",
    "    def read(self, key):\n",
    "        if key not in self.data:\n",
    "            raise KeyError(f\"Key '{key}' not found.\")\n",
    "        return self.data[key]\n",
    "\n",
    "    def update(self, key, value):\n",
    "         if key not in self.data:\n",
    "            raise KeyError(f\"Key '{key}' not found.\")\n",
    "         self.data[key] = value\n",
    "         self._save_data()\n",
    "\n",
    "    def delete(self, key):\n",
    "        if key not in self.data:\n",
    "             raise KeyError(f\"Key '{key}' not found.\")\n",
    "        del self.data[key]\n",
    "        self._save_data()\n",
    "\n",
    "    def get_all_keys(self):\n",
    "        return list(self.data.keys())\n",
    "\n",
    "# Example usage:\n",
    "if __name__ == \"__main__\":\n",
    "    storage = DataStorage()\n",
    "\n",
    "    storage.create(\"name\", \"John Doe\")\n",
    "    storage.create(\"age\", 30)\n",
    "    print(f\"Name: {storage.read('name')}\")  # Output: John Doe\n",
    "    storage.update(\"age\", 31)\n",
    "    print(f\"Updated age: {storage.read('age')}\") # Output: 31\n",
    "    storage.delete(\"age\")\n",
    "    print(f\"Keys remaining: {storage.get_all_keys()}\") # Output: ['name']\n",
    "\n",
    "    try:\n",
    "        print(storage.read(\"age\"))\n",
    "    except KeyError as e:\n",
    "        print(e) # Output: Key 'age' not found."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d41750e-4401-42b9-add7-7af72b887e5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def record_list(filename=\"my_list.txt\"):\n",
    "    \"\"\"Records user input into a list and saves it to a file.\"\"\"\n",
    "    my_list = []\n",
    "    while True:\n",
    "        item = input(\"Enter an item to add to the list (or type 'save' to save and exit): \")\n",
    "        if item.lower() == 'save':\n",
    "            break\n",
    "        my_list.append(item)\n",
    "    \n",
    "    with open(filename, 'w') as file:\n",
    "        for item in my_list:\n",
    "            file.write(item + '\\n')\n",
    "    print(f\"List saved to {filename}\")\n",
    "\n",
    "# Example usage\n",
    "record_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d650939-8551-4cfe-9ed7-bef8c6e59cf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_guest_count():\n",
    "    while True:\n",
    "        try:\n",
    "            num_guests = int(input(\"Enter the number of guests attending the party: \"))\n",
    "            if num_guests >= 0:\n",
    "                return num_guests\n",
    "            else:\n",
    "                print(\"Please enter a non-negative number of guests.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "num_guests = get_guest_count()\n",
    "print(f\"The number of guests attending the party is: {num_guests}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4244b0e7-ddf6-495b-a441-315ec55c2f2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from datetime import datetime\n",
    "import time\n",
    "import threading\n",
    "import os\n",
    "\n",
    "class AlarmClock:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        root.title(\"Digital Alarm Clock\")\n",
    "        self.alarm_time = \"\"\n",
    "        self.is_alarm_set = False\n",
    "\n",
    "        self.time_label = tk.Label(root, font=(\"Helvetica\", 48), text=self.get_current_time())\n",
    "        self.time_label.pack(pady=20)\n",
    "\n",
    "        self.alarm_entry = tk.Entry(root, font=(\"Helvetica\", 24), width=10)\n",
    "        self.alarm_entry.insert(0, \"HH:MM:SS\")\n",
    "        self.alarm_entry.pack(pady=10)\n",
    "\n",
    "        self.set_button = tk.Button(root, text=\"Set Alarm\", font=(\"Helvetica\", 20), command=self.set_alarm)\n",
    "        self.set_button.pack()\n",
    "\n",
    "        self.cancel_button = tk.Button(root, text=\"Cancel Alarm\", font=(\"Helvetica\", 20), command=self.cancel_alarm, state=tk.DISABLED)\n",
    "        self.cancel_button.pack()\n",
    "\n",
    "        self.update_time()\n",
    "\n",
    "    def get_current_time(self):\n",
    "         now = datetime.now()\n",
    "         return now.strftime(\"%H:%M:%S\")\n",
    "\n",
    "    def update_time(self):\n",
    "        self.time_label.config(text=self.get_current_time())\n",
    "        self.root.after(1000, self.update_time)\n",
    "        if self.is_alarm_set:\n",
    "            self.check_alarm()\n",
    "\n",
    "    def set_alarm(self):\n",
    "        self.alarm_time = self.alarm_entry.get()\n",
    "        try:\n",
    "            datetime.strptime(self.alarm_time, \"%H:%M:%S\")\n",
    "            self.is_alarm_set = True\n",
    "            self.set_button.config(state=tk.DISABLED)\n",
    "            self.cancel_button.config(state=tk.NORMAL)\n",
    "        except ValueError:\n",
    "             self.alarm_time = \"\"\n",
    "             self.alarm_entry.delete(0, tk.END)\n",
    "             self.alarm_entry.insert(0, \"Invalid Time\")\n",
    "\n",
    "    def cancel_alarm(self):\n",
    "        self.is_alarm_set = False\n",
    "        self.alarm_time = \"\"\n",
    "        self.set_button.config(state=tk.NORMAL)\n",
    "        self.cancel_button.config(state=tk.DISABLED)\n",
    "        self.alarm_entry.delete(0, tk.END)\n",
    "        self.alarm_entry.insert(0, \"HH:MM:SS\")\n",
    "\n",
    "    def check_alarm(self):\n",
    "        if self.get_current_time() == self.alarm_time:\n",
    "            self.play_alarm_sound()\n",
    "            self.cancel_alarm()\n",
    "\n",
    "    def play_alarm_sound(self):\n",
    "        print(\"Wake up!\")\n",
    "        # Replace 'path_to_your_sound_file.wav' with the actual path to your alarm sound file\n",
    "        # os.system('aplay path_to_your_sound_file.wav')  # For Linux\n",
    "        # os.system('afplay path_to_your_sound_file.wav')  # For macOS\n",
    "        # os.system('start path_to_your_sound_file.wav')   # For Windows\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    clock = AlarmClock(root)\n",
    "    root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00326750-cdbb-4f3e-b50f-d979a42f1e56",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def high_low_game():\n",
    "    \"\"\"Plays a high-low guessing game with the user.\"\"\"\n",
    "    number = random.randint(1, 100)\n",
    "    attempts = 0\n",
    "    \n",
    "    print(\"Welcome to the High-Low Guessing Game!\")\n",
    "    print(\"I'm thinking of a number between 1 and 100.\")\n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            guess = int(input(\"Take a guess: \"))\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "            continue\n",
    "        \n",
    "        attempts += 1\n",
    "        \n",
    "        if guess < number:\n",
    "            print(\"Too low!\")\n",
    "        elif guess > number:\n",
    "            print(\"Too high!\")\n",
    "        else:\n",
    "            print(f\"Congratulations! You guessed the number in {attempts} attempts.\")\n",
    "            break\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    high_low_game()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0afc55a1-9542-49c5-bea7-91060bf5e57a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2024.02-py310",
   "language": "python",
   "name": "conda-env-anaconda-2024.02-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
