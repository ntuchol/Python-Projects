{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c9cd6a89-aa11-41a5-a069-fb3464c12c3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "********\n",
      "********\n",
      "********\n",
      "********\n"
     ]
    }
   ],
   "source": [
    "def draw_rectangle(width, height):\n",
    "    \"\"\"\n",
    "    Draws a rectangle using asterisks.\n",
    "\n",
    "    Args:\n",
    "        width: The width of the rectangle.\n",
    "        height: The height of the rectangle.\n",
    "    \"\"\"\n",
    "    for _ in range(height):\n",
    "        print(\"*\" * width)\n",
    "\n",
    "# Example usage:\n",
    "draw_rectangle(8, 4) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "307117a5-0c4e-4144-9aba-605a83c21e18",
   "metadata": {},
   "outputs": [],
   "source": [
    "def parallelogram_area(base, height):\n",
    "    \"\"\"\n",
    "    Calculate the area of a parallelogram.\n",
    "\n",
    "    Args:\n",
    "        base (float): Length of the base.\n",
    "        height (float): Perpendicular height to the base.\n",
    "\n",
    "    Returns:\n",
    "        float: Area of the parallelogram.\n",
    "    \"\"\"\n",
    "    if base < 0 or height < 0:\n",
    "      raise ValueError(\"Base and height must be non-negative\")\n",
    "    return base * height"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3a9c6cac-9313-4907-93fb-dcde0b209bdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import turtle\n",
    "\n",
    "def draw_triangle(x1, y1, x2, y2, x3, y3, color=\"black\"):\n",
    "    \"\"\"\n",
    "    Draws a triangle using turtle graphics.\n",
    "\n",
    "    Args:\n",
    "        x1, y1: Coordinates of the first vertex.\n",
    "        x2, y2: Coordinates of the second vertex.\n",
    "        x3, y3: Coordinates of the third vertex.\n",
    "        color: (Optional) The color of the triangle's outline. Defaults to \"black\".\n",
    "    \"\"\"\n",
    "    pen = turtle.Turtle()\n",
    "    pen.speed(0)  # Set speed to fastest\n",
    "    pen.color(color)\n",
    "\n",
    "    pen.penup()\n",
    "    pen.goto(x1, y1)\n",
    "    pen.pendown()\n",
    "\n",
    "    pen.goto(x2, y2)\n",
    "    pen.goto(x3, y3)\n",
    "    pen.goto(x1, y1)  # Close the triangle\n",
    "    pen.penup() # Lift pen for next drawing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1d976582-27a6-467d-8f66-9acaf22ea926",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Days since January 1, 1970: 20168.0\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "seconds_since_epoch = time.time()\n",
    "seconds_in_a_day = 24 * 60 * 60\n",
    "days_since_epoch = seconds_since_epoch // seconds_in_a_day\n",
    "\n",
    "print(f\"Days since January 1, 1970: {days_since_epoch}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ccb5abcc-d1b7-4f29-8782-c48f565ce2c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_triangle(a, b, c):\n",
    "    return a + b > c and a + c > b and b + c > a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0ec942ce-3a65-4407-911c-92f019e926fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def koch(turtle, iterations, length):\n",
    "    if iterations == 0:\n",
    "        turtle.forward(length)\n",
    "    else:\n",
    "        for angle in [60, -120, 60, 0]:\n",
    "            koch(turtle, iterations - 1, length / 3)\n",
    "            turtle.left(angle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1ff7436a-4b0f-4ee6-b1e0-43ffd89844c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The distance between (1, 2) and (4, 6) is: 5.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def distance_between_points(point1, point2):\n",
    "  \"\"\"\n",
    "  Calculates the Euclidean distance between two points.\n",
    "\n",
    "  Args:\n",
    "    point1: A tuple or list representing the coordinates of the first point (x1, y1).\n",
    "    point2: A tuple or list representing the coordinates of the second point (x2, y2).\n",
    "\n",
    "  Returns:\n",
    "    The distance between the two points.\n",
    "  \"\"\"\n",
    "  x1, y1 = point1\n",
    "  x2, y2 = point2\n",
    "  return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n",
    "\n",
    "# Example usage\n",
    "point1 = (1, 2)\n",
    "point2 = (4, 6)\n",
    "distance = distance_between_points(point1, point2)\n",
    "print(f\"The distance between {point1} and {point2} is: {distance}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9d85ae51-10b4-4e33-88b3-03a663774717",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def hypot(side1, side2):\n",
    "  return math.sqrt(side1**2 + side2**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f42a313f-1636-4f63-8205-85e75cdb88b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_between(value, lower_bound, upper_bound):\n",
    "    return lower_bound <= value <= upper_bound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6e7fcaa9-7209-4a66-8f2a-1150e09745b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ackermann(m, n):\n",
    "    if m == 0:\n",
    "        return n + 1\n",
    "    elif n == 0:\n",
    "        return ackermann(m - 1, 1)\n",
    "    else:\n",
    "        return ackermann(m - 1, ackermann(m, n - 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4bd62e33-cabb-4ba6-989b-376fb4e661b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gcd(a, b):\n",
    "    while(b):\n",
    "        a, b = b, a % b\n",
    "    return a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bbf04432-da42-474f-81cf-93e6aacc3abe",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_word(text, word):\n",
    "    if not isinstance(text, str) or not isinstance(word, str):\n",
    "        raise TypeError(\"Both text and word must be strings.\")\n",
    "    return word in text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4282ca73-4c3b-49c3-be08-4f9796ec9b6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_anagram(s1, s2):\n",
    "    s1 = s1.lower()\n",
    "    s2 = s2.lower()\n",
    "    return sorted(s1) == sorted(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "63036cb0-9220-4100-92e6-a1ecd7e6b8d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def reverse_sentence(sentence):\n",
    "    words = sentence.split()\n",
    "    reversed_words = words[::-1]\n",
    "    return \" \".join(reversed_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2e43b980-43fa-44a4-a905-efae72ccc7e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def total_length(*args):\n",
    "  total = 0\n",
    "  for arg in args:\n",
    "    if isinstance(arg, str):\n",
    "      total += len(arg)\n",
    "  return total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5a2cb8f0-391a-47af-866f-14588e854ee9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def has_duplicates(input_list):\n",
    "    seen = set()\n",
    "    for item in input_list:\n",
    "        if item in seen:\n",
    "            return True\n",
    "        seen.add(item)\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f8dc7893-9d22-424e-8493-7e9228e93a5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_interlocking(a, b):\n",
    "    # Convert the integers to binary representations (strings)\n",
    "    binary_a = bin(a)[2:]  # Remove \"0b\" prefix\n",
    "    binary_b = bin(b)[2:]\n",
    "\n",
    "    # Pad the shorter binary string with leading zeros to make them the same length\n",
    "    max_len = max(len(binary_a), len(binary_b))\n",
    "    binary_a = binary_a.zfill(max_len)\n",
    "    binary_b = binary_b.zfill(max_len)\n",
    "\n",
    "    # Check for overlapping 1s\n",
    "    for i in range(max_len):\n",
    "        if binary_a[i] == '1' and binary_b[i] == '1':\n",
    "            return False  # Found overlapping 1s, not interlockable\n",
    "\n",
    "    return True  # No overlapping 1s, interlockable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d5a67381-5351-4731-ad94-52511f02d382",
   "metadata": {},
   "outputs": [],
   "source": [
    "def shift_word(text, shift):\n",
    "    result = ''\n",
    "    for char in text:\n",
    "        if char.isalpha():\n",
    "            start = ord('a') if char.islower() else ord('A')\n",
    "            shifted_char = chr((ord(char) - start + shift) % 26 + start)\n",
    "        elif char.isdigit():\n",
    "             shifted_char = str((int(char) + shift) % 10)\n",
    "        else:\n",
    "            shifted_char = char\n",
    "        result += shifted_char\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ea6d94d9-923f-4126-a756-0e94e81294df",
   "metadata": {},
   "outputs": [],
   "source": [
    "def most_frequent_letters(text):\n",
    "    letter_counts = {}\n",
    "    for char in text.lower():\n",
    "        if 'a' <= char <= 'z':\n",
    "            letter_counts[char] = letter_counts.get(char, 0) + 1\n",
    "\n",
    "    if not letter_counts:\n",
    "        return []\n",
    "    \n",
    "    max_count = max(letter_counts.values())\n",
    "    most_frequent = [letter for letter, count in letter_counts.items() if count == max_count]\n",
    "    most_frequent.sort()\n",
    "    return most_frequent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "89df3e05-e0c8-4e53-8ee0-b5a8799cc1a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def word_distance(words, word1, word2):\n",
    "    index1 = -1\n",
    "    index2 = -1\n",
    "    min_distance = float('inf')\n",
    "\n",
    "    for i, word in enumerate(words):\n",
    "        if word == word1:\n",
    "            index1 = i\n",
    "        elif word == word2:\n",
    "            index2 = i\n",
    "\n",
    "        if index1 != -1 and index2 != -1:\n",
    "            min_distance = min(min_distance, abs(index1 - index2))\n",
    "\n",
    "    if min_distance == float('inf'):\n",
    "        return -1\n",
    "    else:\n",
    "        return min_distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f177c910-a592-4c39-89af-9c137c4608a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 4, 5, 6]\n"
     ]
    }
   ],
   "source": [
    "def successor_map(iterable):\n",
    "    return map(lambda x: x + 1, iterable)\n",
    "\n",
    "# Example usage:\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "successor_numbers = list(successor_map(numbers))\n",
    "print(successor_numbers)  # Output: [2, 3, 4, 5, 6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "77dabf3b-8c8d-4d67-978c-2361b4f81c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grape banana grape orange grape\n",
      "grape banana grape orange apple\n"
     ]
    }
   ],
   "source": [
    "text = \"apple banana apple orange apple\"\n",
    "new_text = text.replace(\"apple\", \"grape\")\n",
    "print(new_text)  # Output: grape banana grape orange grape\n",
    "\n",
    "text = \"apple banana apple orange apple\"\n",
    "new_text = text.replace(\"apple\", \"grape\", 2)\n",
    "print(new_text)  # Output: grape banana grape orange apple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "92c966f6-c35b-4671-ad06-ba73d7075d1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n"
     ]
    }
   ],
   "source": [
    "string1 = \"Hello\"\n",
    "string2 = \"World\"\n",
    "result = string1 + \" \" + string2  # Adds a space between the words\n",
    "print(result)  # Output: Hello World"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "41369632-3cb0-4465-a661-e64f4bf1e65e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def has_straight(hand):\n",
    "    if len(hand) < 5:\n",
    "        return False\n",
    "\n",
    "    unique_ranks = sorted(list(set(hand))) # Remove duplicates and sort\n",
    "    if len(unique_ranks) < 5:\n",
    "      return False\n",
    "    \n",
    "    for i in range(len(unique_ranks) - 4):\n",
    "        if unique_ranks[i+4] - unique_ranks[i] == 4:\n",
    "            return True\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0b8f13dc-c24c-44d4-9a7c-b3e0ea4360cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-03-21 10:00:00 is after 2025-03-21 09:00:00\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "def is_after(dt1, dt2):\n",
    "    return dt1 > dt2\n",
    "\n",
    "# Example usage:\n",
    "dt1 = datetime(2025, 3, 21, 10, 0, 0)\n",
    "dt2 = datetime(2025, 3, 21, 9, 0, 0)\n",
    "\n",
    "if is_after(dt1, dt2):\n",
    "    print(f\"{dt1} is after {dt2}\")\n",
    "else:\n",
    "    print(f\"{dt1} is not after {dt2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "828274d2-0228-4eda-87c9-74e149d2a5d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2024.02-py310",
   "language": "python",
   "name": "conda-env-anaconda-2024.02-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
